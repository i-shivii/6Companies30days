class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {


    int n = nums.size();
    if (n < k) return 0;

    unordered_map<int, int> freq;
    int maxSum = 0, currentSum = 0;

    for (int i = 0; i < n; ++i) {
        currentSum += nums[i];
        freq[nums[i]]++;

        if (i >= k - 1) {
            if (freq.size() == k) {
                maxSum = max(maxSum, currentSum);
            }

            int leftElement = nums[i - k + 1];
            currentSum -= leftElement;
            freq[leftElement]--;
            if (freq[leftElement] == 0) {
                freq.erase(leftElement);
            }
        }
    }

    return maxSum;


    }
};
