
class Solution {
public:
    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
        int n = source.size();
        
      
        if (source.size() != target.size()) return -1;

  
        vector<vector<long long>> adj(26, vector<long long>(26, LLONG_MAX));
    
        for (int i = 0; i < original.size(); i++) {
            int from = original[i] - 'a';
            int to = changed[i] - 'a';
            adj[from][to] = min(adj[from][to], (long long)cost[i]);
        }

     
        for (int k = 0; k < 26; k++) {
            for (int i = 0; i < 26; i++) {
                for (int j = 0; j < 26; j++) {
                    if (adj[i][k] != LLONG_MAX && adj[k][j] != LLONG_MAX) {
                        adj[i][j] = min(adj[i][j], adj[i][k] + adj[k][j]);
                    }
                }
            }
        }

        long long totalCost = 0;

     
        for (int i = 0; i < n; i++) {
            if (source[i] == target[i]) continue; 
            int from = source[i] - 'a';
            int to = target[i] - 'a';
            if (adj[from][to] == LLONG_MAX) return -1; 
            totalCost += adj[from][to];
        }

        return totalCost > LLONG_MAX ? -1 : totalCost;
    }
};
