class Solution {
public:
    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
        

    int n = source.size();
    if (source.size() != target.size()) return -1;

    vector<vector<int>> adj(26, vector<int>(26, INT_MAX));
    for (int i = 0; i < original.size(); i++) {
        adj[original[i] - 'a'][changed[i] - 'a'] = min(adj[original[i] - 'a'][changed[i] - 'a'], cost[i]);
    }

    for (int k = 0; k < 26; k++) {
        for (int i = 0; i < 26; i++) {
            for (int j = 0; j < 26; j++) {
                if (adj[i][k] < INT_MAX && adj[k][j] < INT_MAX) {
                    adj[i][j] = min(adj[i][j], adj[i][k] + adj[k][j]);
                }
            }
        }
    }

    int totalCost = 0;
    for (int i = 0; i < n; i++) {
        if (source[i] == target[i]) continue;
        int from = source[i] - 'a';
        int to = target[i] - 'a';
        if (adj[from][to] == INT_MAX) return -1;
        totalCost += adj[from][to];
    }

    return totalCost;
    }
};
