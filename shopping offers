class Solution {
public:
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        return dfs(price, special, needs);
    }

private:
    unordered_map<string, int> memo;

    int dfs(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        string key = serialize(needs);

        if (memo.count(key)) return memo[key];

        int cost = 0;
        for (int i = 0; i < needs.size(); i++) {
            cost += needs[i] * price[i];
        }

        for (auto& offer : special) {
            vector<int> newNeeds = needs;
            bool valid = true;
            for (int i = 0; i < needs.size(); i++) {
                newNeeds[i] -= offer[i];
                if (newNeeds[i] < 0) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                cost = min(cost, offer.back() + dfs(price, special, newNeeds));
            }
        }

        memo[key] = cost;
        return cost;
    }

    string serialize(vector<int>& needs) {
        string key = "";
        for (int n : needs) {
            key += to_string(n) + ",";
        }
        return key;
    }
};
