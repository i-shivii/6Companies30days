
class Solution {
private:
    vector<vector<int>> rects;
    vector<int> areas;
    int totalArea;

public:
    Solution(vector<vector<int>>& rects) : rects(rects), totalArea(0) {
        for (const auto& rect : rects) {
            int x1 = rect[0], y1 = rect[1], x2 = rect[2], y2 = rect[3];
            int area = (x2 - x1 + 1) * (y2 - y1 + 1);
            totalArea += area;
            areas.push_back(totalArea);
        }
        srand(time(0));
    }

    vector<int> pick() {
        int target = rand() % totalArea + 1;
        int low = 0, high = areas.size() - 1;

        while (low < high) {
            int mid = low + (high - low) / 2;
            if (areas[mid] < target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        const auto& rect = rects[low];
        int x1 = rect[0], y1 = rect[1], x2 = rect[2], y2 = rect[3];
        int x = x1 + rand() % (x2 - x1 + 1);
        int y = y1 + rand() % (y2 - y1 + 1);
        return {x, y};
    }
};
